// Variables
// =============================================================================

$grid-column: 60px !default; // can be px, em, or %
$grid-gutter: 20px !default; // can be px, em, or %
$grid-overlay: false !default; // generate visual grid overlay
$ie-support: false !default; // number of columns for IE fallback (must match a breakpoint)
$grid-direction: left !default; // switch to 'right' for rtl
$current-bp: 0; // init breakpoint variable

// Functions
// =============================================================================

// column widths for elements with .grid-cell class
@function fixed($col) { @return $col * ( em($grid-column) + em($grid-gutter) ) }
@function fluid($col, $avail: $current-bp) { @return (100% / $avail) * $col }

// column width for elements not in grid
@function no-grid-fixed($col) { @return $col * ( em($grid-column) + em($grid-gutter) ) - em($grid-gutter) }

// Javascript hook
// =============================================================================
@media (min-width: 0px) { body::before { content: 'mobile'; display: none; } }

// Breakpoint mixin
// =============================================================================

@mixin breakpoint($min: false, $max: false, $label: false, $orientation: false, $wrapper: true, $resolution: false) {

    // set warnings if arguments are invalid
    @if ($min == false and $max == false and $label == false and $orientation == false and $wrapper == true and $resolution == false) {
    	@warn "breakpoint requires you to pass some kind of argument. It can't read your mind. :)";
    }
    @if ($min == 0 and $max == false and $label == false and $orientation == false and $wrapper == true and $resolution == false) {
    	@warn "If you pass zero as a minimum you need to specify a max column value.";
    }

	// set current breakpoint for fluid function
	$current-bp: $min;

	// min width mq
	@if ($min and $max == false) {
		@if ($min > 0) {
    		// create min width mq
    		// can we remove duplication of code here?
    		@if ($orientation) {
        		@media ( min-width: fixed($min) + em($grid-gutter) * ($base-font-size / 16px) ) and ( orientation: $orientation ) {
            		@include breakpoint-extras($min, $wrapper, $label, $grid-overlay) { @content };
        		}
    		} @else {
        		@media ( min-width: (fixed($min) + em($grid-gutter)) * ($base-font-size / 16px) ) {
            		@include breakpoint-extras($min, $wrapper, $label, $grid-overlay) { @content };
        		}
    		}
    		// ie fallback
    		@if ($ie-support and $min <= $ie-support and $orientation == false) {
    			.lt-ie9 {
                    @include breakpoint-extras($min, $wrapper, $label: false, $grid-overlay: false) { @content };
    			}
    		}
		}
	}

	// max width mq
	@if ($max) {
		// create max only mq
		@if ($min == 0 or $min == false) {
    		@if ($orientation) {
            	@media ( max-width: fixed($max) + em($grid-gutter) * ($base-font-size / 16px) ) and ( orientation: $orientation ) { @content }
    		} @else {
        		@media ( max-width: fixed($max) + em($grid-gutter) * ($base-font-size / 16px) ) { @content }
    		}
		// create min and max mq
		} @else {
    		@if ($orientation) {
        		@media ( min-width: fixed($min) + em($grid-gutter) * ($base-font-size / 16px) ) and ( max-width: fixed($max) + em($grid-gutter) ) and ( orientation: $orientation ) { @content }
    		} @else {
            	@media ( min-width: fixed($min) + em($grid-gutter) * ($base-font-size / 16px) ) and ( max-width: fixed($max) + em($grid-gutter) ) { @content }
    		}
		}
	}

	// orientation only mq
	@if ($min == false and $max == false) {
    	@if ($orientation) {
        	@media ( orientation: $orientation ) { @content }
    	}
	}

	// pixel ratio mq
	@if ($resolution) {    	
    	// warn if invalid value
    	@if ($resolution != 'high' and $resolution != 'low') {
        	@warn "$resolution only supports values of 'high' or 'low'";
    	}
    	@if ($resolution == 'high') {
            @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) { @content }	
    	}
    	@if ($resolution == 'low') {
        	@media (-webkit-max-device-pixel-ratio: 1.5), (max-resolution: 144dpi) { @content }
    	}
		// ie fallback
		@if ($ie-support and $resolution == 'low') {
			.lt-ie9 { @content }
		}
	}
}

// private mixin for generating extras in a min width mq
@mixin breakpoint-extras($min, $wrapper, $label, $grid-overlay) {
	@if($grid-overlay) { @include grid-overlay($min); }
	// create hook for js
	@if($label) { body::before { content: $label; } }
	// proper sizing of wrapper
    @if($wrapper) { .wrapper { width: fixed($min) - em($grid-gutter); margin-left: auto; margin-right: auto; } }
	@content
}

// Grid overlay
// =============================================================================

@mixin grid-overlay($col: false) {
	body::after {
		content: ''; position: fixed; top: 0; bottom: 0; pointer-events: none;
		@include background(linear-gradient(left, transparent $grid-gutter, transparentize(red, .9) $grid-gutter, transparentize(red, .9) $grid-gutter + $grid-column));
		@if ($col) {
			left: 50%;
			width: fixed($col) + em($grid-gutter); margin-left: fixed($col) / -2 - (em($grid-gutter)/2);
			@include background-size($grid-gutter + $grid-column);
		} @else {
			left: 0; right: $grid-gutter;
			@include background-size(25%);
		}
	}
}
@if($grid-overlay) { @include grid-overlay; }